//Pathfinding code begins here
//Code created by Deltin, available from https://workshop.codes/hp2dg (requires the game to retrieve)

globalvar define pfLoadedMap_nodes;
globalvar define pfLoadedMap_neighbors;
globalvar define pfIterationsThisTick;
globalvar define pfExecOwner;
globalvar define i_pathfind;
playervar define pfWait;
playervar define pfDestination;
playervar define pfPlayerAttributes;
playervar define pfAttributes;
playervar define pfSavedTarget;
playervar define pfIsPathfinding;
playervar define pfCurrentNodeIndex;
playervar define pfWalkingToPosition;
playervar define pfPath;
playervar define pfStartTime;
playervar define pfWalkingFromPosition;
playervar define pfActiveNode;
playervar define pfStuckOnNode;
playervar define pfWasBroadcasted;
playervar define pfIsStuck;
playervar define goal;
playervar define scores_gScore;
playervar define scores_fScore;
playervar define scores_parent;
playervar define scores_nodeIndex;
playervar define open;
playervar define checkedNode;
playervar define iter;
playervar define current;
playervar define currentInExistingPath;
playervar define broadcastTo;
playervar define neighbor;
playervar define neighborI;
playervar define scoreIndex;
playervar define score;

rule: "【PF Core】Prepare loaded map"
{
    WaitUntil(pfLoadedMap_nodes, 9999);
    for (i_pathfind = 0; CountOf(pfLoadedMap_nodes); 1)
    {
        pfLoadedMap_nodes[i_pathfind] = Vector(XOf(pfLoadedMap_nodes[i_pathfind]), RoundToInteger(YOf(pfLoadedMap_nodes[i_pathfind]), Rounding.Down) + i_pathfind / 1000 * (YOf(pfLoadedMap_nodes[i_pathfind]) < 0 ? -1 : 1), ZOf(pfLoadedMap_nodes[i_pathfind]));
    }
}

rule: "【PF Core】Select next pathfinder"
if ((!EntityExists(pfExecOwner) || pfExecOwner == null) == true)
if (IsTrueForAny(AllPlayers(Team.All), ArrayElement().pfWait) == true)
{
    pfExecOwner = FirstOf(SortedArray(FilteredArray(AllPlayers(Team.All), ArrayElement().pfWait), ArrayElement().pfWait));
    MinWait();
    LoopIfConditionIsTrue();
}

void pfTick() "【PF Core Subroutine】☞ Tick"
{
    pfIterationsThisTick -= 1;
    if (pfIterationsThisTick <= 0)
    {
        MinWait();
        WaitUntil(Max(ServerLoadAverage(), ServerLoad()) < 255, 0.25);
        # This determines the pathfinding budget for the current tick.
        pfIterationsThisTick = (Max(ServerLoadAverage(), ServerLoad()) < 230) + (Max(ServerLoadAverage(), ServerLoad()) < 180) * 2 + 1;
    }
}

void pfUpdateNodeMeta() "【PF Core Subroutine】☞ Update node meta"
{
    if (pfCurrentNodeIndex != -1)
    {
        pfActiveNode = pfCurrentNodeIndex;
    }
    if (pfStuckOnNode == 1)
    {
        pfStuckOnNode = 0;
    }
    # Update the pathfinding start time.
    pfStartTime = TotalTimeElapsed();
    pfWalkingFromPosition = PositionOf(EventPlayer());
}

void pfWalkToDestination() "☆【PF Core Subroutine】☞ Walk to destination"
{
    StartThrottleInDirection(EventPlayer(), DirectionTowards(PositionOf(EventPlayer()), pfWalkingToPosition), pfWalkingToPosition && (pfCurrentNodeIndex != -1 || DistanceBetween(PositionOf(EventPlayer()), pfWalkingToPosition) > 0.4), Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
}

rule: "【PF Core】Update & Execute"
Event.OngoingPlayer
if (pfDestination == true)
if (DistanceBetween(EventPlayer(), pfDestination) > 4)
if ((!pfSavedTarget || DistanceBetween(pfDestination, pfSavedTarget) > 5) == true)
{
    # Ensure that a map is loaded.
    if (!pfLoadedMap_nodes)
    {
        LogToInspector(<"Error: Attempted to pathfind player <0> without a loaded map.", EventPlayer()>);
        Abort();
    }
    pfWait = TotalTimeElapsed();
    pfWasBroadcasted = false;
    WaitUntil(pfExecOwner == EventPlayer() || pfWasBroadcasted, 9999);
    # Update saved destination
    pfSavedTarget = pfDestination;
    if (!pfWasBroadcasted)
    {
        goal = RoundToInteger(AbsoluteValue(YOf(FirstOf(SortedArray(ArraySlice(SortedArray(pfLoadedMap_nodes, DistanceBetween(ArrayElement(), pfSavedTarget)), 0, 5), !IsInLineOfSight(ArrayElement() + Vector(0, 2, 0), pfSavedTarget + Vector(0, 2, 0), BarrierLOS.NoBarriersBlock))))) * 1000 % 1000, Rounding.Down);
        pfTick();
        if (pfIsPathfinding && pfCurrentNodeIndex != -1)
        {
            pfActiveNode = pfCurrentNodeIndex;
        }
        else
        {
            pfActiveNode = RoundToInteger(AbsoluteValue(YOf(FirstOf(SortedArray(ArraySlice(SortedArray(pfLoadedMap_nodes, DistanceBetween(ArrayElement(), PositionOf(EventPlayer()))), 0, 5), !IsInLineOfSight(ArrayElement() + Vector(0, 2, 0), PositionOf(EventPlayer()) + Vector(0, 2, 0), BarrierLOS.NoBarriersBlock))))) * 1000 % 1000, Rounding.Down);
            pfTick();
        }
        scores_gScore = [0];
        scores_fScore = [0];
        scores_parent = [-1];
        scores_nodeIndex = [goal];
        open = [0];
        checkedNode = pfActiveNode;
        iter = 0;
        while (CountOf(open) || iter > 30)
        {
            # The index of the current node in `scores`.
            current = FirstOf(SortedArray(open, scores_fScore[ArrayElement()]));
            if (checkedNode != pfActiveNode)
            {
                checkedNode = IndexOfArrayValue(scores_nodeIndex, pfActiveNode);
                if (checkedNode != -1)
                {
                    current = checkedNode;
                    checkedNode = -2;
                }
                else
                {
                    checkedNode = pfActiveNode;
                }
            }
            currentInExistingPath = IndexOfArrayValue(pfPath, scores_nodeIndex[current]);
            # If the goal was found, reconstruct the path.
            if (scores_nodeIndex[current] == pfActiveNode || checkedNode == -2 || currentInExistingPath != -1)
            {
                if (currentInExistingPath == -1)
                {
                    pfPath = [];
                }
                else
                {
                    pfPath = ArraySlice(pfPath, 0, currentInExistingPath);
                }
                while (current != -1)
                {
                    ModifyVariable(pfPath, Operation.AppendToArray, scores_nodeIndex[current]);
                    current = scores_parent[current];
                }
                ModifyVariable(pfPath, Operation.AppendToArray, [-1]);
                broadcastTo = FilteredArray(PlayersWithinRadius(PositionOf(EventPlayer()) + Up(), 4, Team.All, RadiusLOS.Off), ArrayElement() != EventPlayer() && ArrayElement().pfWait && DistanceBetween(ArrayElement().pfDestination, pfDestination) < 4 && ArrayElement().pfPlayerAttributes == pfPlayerAttributes);
                broadcastTo.pfPath = pfPath;
                broadcastTo.pfWasBroadcasted = true;
                Skip(27);
            }
            ModifyVariable(open, Operation.RemoveFromArrayByValue, current);
            # Check each neighbor to the current node.
            for (neighbor = 0; CountOf(pfLoadedMap_neighbors[scores_nodeIndex[current]]); 1)
            {
                # The neighbor index to be used like `pfLoadedMap.nodes[neighborI]`.
                neighborI = FirstOf(pfLoadedMap_neighbors[scores_nodeIndex[current]][neighbor]);
                scoreIndex = IndexOfArrayValue(scores_nodeIndex, neighborI);
                # Ensure that the path to the neighbor is enabled.
                if (CountOf(pfLoadedMap_neighbors[scores_nodeIndex[current]][neighbor][1]) == 0 || IsTrueForAny(pfLoadedMap_neighbors[scores_nodeIndex[current]][neighbor][1], ArrayContains(pfPlayerAttributes, ArrayElement())))
                {
                    score = scores_gScore[current] + DistanceBetween(pfLoadedMap_nodes[scores_nodeIndex[current]], pfLoadedMap_nodes[neighborI]);
                    # Get neighbor index in scores.\r\nIf -1, the neighbor was not added to the score list yet.
                    if (scoreIndex == -1)
                    {
                        ModifyVariable(open, Operation.AppendToArray, CountOf(scores_gScore));
                        ModifyVariable(scores_gScore, Operation.AppendToArray, score);
                        ModifyVariable(scores_fScore, Operation.AppendToArray, score + DistanceBetween(pfLoadedMap_nodes[neighborI], pfLoadedMap_nodes[pfActiveNode]) * 20);
                        ModifyVariable(scores_parent, Operation.AppendToArray, current);
                        ModifyVariable(scores_nodeIndex, Operation.AppendToArray, neighborI);
                    }
                    else if (score < scores_gScore[scoreIndex])
                    {
                        scores_gScore[scoreIndex] = score;
                        scores_fScore[scoreIndex] = score + DistanceBetween(pfLoadedMap_nodes[neighborI], pfLoadedMap_nodes[pfActiveNode]) * 20;
                        scores_parent[scoreIndex] = current;
                        scores_nodeIndex[scoreIndex] = neighborI;
                        if (!ArrayContains(open, scoreIndex))
                        {
                            ModifyVariable(open, Operation.AppendToArray, scoreIndex);
                        }
                    }
                }
                pfTick();
            }
            iter += 1;
        }
        pfExecOwner = null;
    }
    if (CountOf(pfPath))
    {
        pfIsPathfinding = true;
        pfCurrentNodeIndex = FirstOf(pfPath);
        pfWalkingToPosition = pfLoadedMap_nodes[pfCurrentNodeIndex];
        pfUpdateNodeMeta();
        pfWalkToDestination();
    }
    pfWait = null;
    Wait(2, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

void pfProgressEventPlayer() "【PF Core Subroutine】☞ Progress event player"
{
    if (CountOf(pfPath) == 0)
    {
        Skip(10);
    }
    # Pop the current path.
    ModifyVariable(pfPath, Operation.RemoveFromArrayByIndex, 0);
    //Pop the next node if the one after is in LOS.
    //if (CountOf(pfPath) > 0 && DistanceBetween(RayCastHitPosition(WorldVectorOf(Vector(0,0,0), EventPlayer(), LocalVector.RotationAndTranslation) + Vector(0,0.25,0),
                            //pfLoadedMap_nodes[pfPath[0]], [], [], false), 
                        //pfLoadedMap_nodes[pfPath[0]]) < 0.5) {
        //ModifyVariable(pfPath, Operation.RemoveFromArrayByIndex, 0);  
    //}
    # Update the current pathfind attributes.
    if (CountOf(pfPath) && FirstOf(pfPath) != -1)
    {
        # Any rules watching these with the matching condition will activate.
        pfAttributes = LastOf(FirstOf(FilteredArray(pfLoadedMap_neighbors[FirstOf(pfPath)], FirstOf(ArrayElement()) == pfCurrentNodeIndex)));
    }
    else
    {
        pfAttributes = [];
    }
    # Go to the next node in the path.
    pfCurrentNodeIndex = FirstOf(pfPath);
    # Set the position that the player is currently walking towards.
    pfWalkingToPosition = pfCurrentNodeIndex == -1 ? DistanceBetween(pfDestination, pfSavedTarget) <= 4 ? pfDestination : PositionOf(EventPlayer()) : pfLoadedMap_nodes[pfCurrentNodeIndex];
    pfUpdateNodeMeta();
}

rule: "【PF Core】Node reached"
Event.OngoingPlayer
if (pfIsPathfinding == true)
if (pfWalkingToPosition == true)
if (DistanceBetween(PositionOf(EventPlayer()) * Vector(1, [], 1), pfWalkingToPosition * Vector(1, [], 1)) <= 0.4)
if (AbsoluteValue(YOf(PositionOf(EventPlayer())) - YOf(pfWalkingToPosition)) <= 1.5)
if (CountOf(pfPath) > 0)
if (pfCurrentNodeIndex != -1)
{
    pfProgressEventPlayer();
    Wait(0.2, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

rule: "【PF Core】Stop throttle when pfDestination is reset"
Event.OngoingPlayer
if (pfIsPathfinding == true)
if (pfDestination == null)
{
    StopThrottleInDirection(EventPlayer());
    pfIsPathfinding = false;
    pfSavedTarget = null;
}

void pfRecalibrate() "【PF Core Subroutine】☞ Recalibrate"
{
    StopThrottleInDirection(EventPlayer());
    pfCurrentNodeIndex = -1;
    pfSavedTarget = null;
    pfIsPathfinding = false;
    pfWalkingToPosition = PositionOf(EventPlayer());
}

rule: "【PF Core】Insurance"
Event.OngoingPlayer
if (pfIsPathfinding == true)
if (pfWalkingToPosition == true)
{
    # Recalibrate
    if (DistanceBetween((pfWalkingFromPosition + pfWalkingToPosition) / 2, EventPlayer()) > (DistanceBetween(pfWalkingFromPosition, pfWalkingToPosition) + 2) * 1.2)
    {
        pfRecalibrate();
    }
    else if (CountOf(pfPath) == 2 && DistanceBetween(EventPlayer(), pfSavedTarget) < DistanceBetween(pfWalkingToPosition, pfSavedTarget) && IsInLineOfSight(PositionOf(EventPlayer()) + Vector(0, 0.25, 0), pfSavedTarget + Vector(0, 0.25, 0), BarrierLOS.NoBarriersBlock))
    {
        pfProgressEventPlayer();
    }
    else if (DistanceBetween(EventPlayer(), pfWalkingToPosition) > 0.25 && pfIsStuck || DistanceBetween(pfWalkingFromPosition, pfWalkingToPosition) - 4.95 * (TotalTimeElapsed() - pfStartTime) < 0 && !HasStatus(EventPlayer(), Status.Rooted) && !HasStatus(EventPlayer(), Status.Frozen) && !HasStatus(EventPlayer(), Status.Asleep) && !HasStatus(EventPlayer(), Status.KnockedDown) && !HasStatus(EventPlayer(), Status.Stunned))
    {
        if (pfCurrentNodeIndex == -1)
        {
            pfWalkingToPosition = null;
        }
        else if (pfStuckOnNode - 2 == pfCurrentNodeIndex)
        {
            LogToInspector(<"Pathfinder <0> struggled to reach node <1> at <2>. Try adjusting your map in the editor.", EventPlayer(), pfCurrentNodeIndex, pfLoadedMap_nodes[pfCurrentNodeIndex]>);
            Teleport(EventPlayer(), pfWalkingToPosition);
        }
        else
        {
            pfStuckOnNode = pfCurrentNodeIndex + 2;
            pfRecalibrate();
        }
    }
    else if (pfWalkingToPosition != pfDestination && pfCurrentNodeIndex == -1 && DistanceBetween(pfSavedTarget, pfDestination) < 5 && IsInLineOfSight(pfSavedTarget + Up(), pfDestination + Up(), BarrierLOS.NoBarriersBlock))
    {
        pfWalkingToPosition = pfDestination;
    }
    Wait(2, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

rule: "【PF Core】Check throttle"
Event.OngoingPlayer
if (pfIsPathfinding == true)
if (MagnitudeOf(VelocityOf(EventPlayer())) < 3)
{
    Wait(2.1, WaitBehavior.AbortWhenFalse);
    pfIsStuck = true;
    WaitUntil(!pfWalkingToPosition || !pfIsPathfinding || MagnitudeOf(VelocityOf(EventPlayer())) >= 3, 9999);
    pfIsStuck = false;
}

void pfLookAtDestination() "☆【PF Core Subroutine】☞ Look at destination"
{
    # Calling this subroutine will make the player look to the point they are walking towards.
    StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()) * (DistanceBetween(PositionOf(EventPlayer()), pfWalkingToPosition) < 3 ? Vector(1, [], 1) : Vector(1, 1, 1)), (pfWalkingToPosition + Vector(0, 1.5, 0)) * (DistanceBetween(PositionOf(EventPlayer()), pfWalkingToPosition) < 3 ? Vector(1, [], 1) : Vector(1, 1, 1))), 500, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
}

//generated nodemaps begin here

rule: "【Map】Busan (nodes)"
if (CurrentMap() == Map.Busan)
{
    pfLoadedMap_nodes = [Vector(-426.93, 11.11, 165.64), Vector(-435.29, 11.11, 175.82), Vector(-417.19, 11.11, 174.39), Vector(-418.92, 11.11, 155.47), Vector(-436.67, 11.11, 157.28), Vector(-411.4, 10.11, 157.25), Vector(-412.9, 10.11, 164.28), Vector(-410.05, 10.11, 171.21), Vector(-404.15, 10.07, 179.63), Vector(-399.37, 9.36, 170.49), Vector(-400.61, 9.36, 156.53), Vector(-406.4, 10.07, 157.44), Vector(-390.33, 9.36, 170.26), Vector(-387.13, 11.07, 175.83), Vector(-382.82, 12.06, 173.49), Vector(-381.3, 12.15, 169.38), Vector(-363.44, 12.03, 162.35), Vector(-366.84, 11.94, 173.56), Vector(-374.34, 12.07, 167.22), Vector(-360.48, 12.05, 169.63), Vector(-359.05, 12.04, 163.96), Vector(-351.36, 12.07, 163.62), Vector(-350.83, 11.07, 180.41), Vector(-339.56, 12.07, 166.83), Vector(-334.74, 12.01, 167.1), Vector(-328.46, 12.01, 171.78), Vector(-322.15, 12.01, 166.93), Vector(-325.12, 12.01, 163.52), Vector(-331.84, 12.01, 163.54), Vector(-328.46, 12.01, 162.41), Vector(-350.96, 12.07, 174.29), Vector(-328.37, 14.07, 178.35), Vector(-331.63, 14.07, 184.59), Vector(-328.34, 14.07, 187.22), Vector(-324.95, 14.07, 184.33), Vector(-337.6, 8.21, 148.48), Vector(-351.93, 10.65, 146.77), Vector(-359.35, 10.61, 144.2), Vector(-351.27, 10.46, 135.58), Vector(-358.36, 10.46, 135.52), Vector(-364.59, 11.14, 142.78), Vector(-364.67, 11.15, 138.36), Vector(-369.03, 12.04, 134.59), Vector(-371.29, 12.04, 130.13), Vector(-381.01, 9.13, 130.03), Vector(-387.78, 9.22, 136.61), Vector(-380.31, 9.13, 138.84), Vector(-383.04, 9.13, 144.3), Vector(-398.93, 9.36, 148.54), Vector(-391.65, 9.12, 143.19), Vector(-385.9, 9.18, 158.54), Vector(-376.1, 11.82, 155.25), Vector(-367.55, 12.03, 155.64), Vector(-369.55, 11.84, 144.48), Vector(-378.07, 9.34, 125.59), Vector(-363.5, 10.07, 125.64), Vector(-363.14, 9.34, 117.82), Vector(-371.18, 9.34, 119.36), Vector(-356.64, 8.29, 117.16), Vector(-353.17, 10.46, 130.01), Vector(-353, 8.14, 124.57), Vector(-348.23, 8.21, 117.48), Vector(-340.65, 8.21, 117.62), Vector(-335.03, 9.81, 110.29), Vector(-330.4, 9.81, 111.47), Vector(-328.51, 9.81, 118.9), Vector(-340.04, 8.21, 140.43), Vector(-332.18, 8.81, 145.19), Vector(-337.2, 8.21, 136.58), Vector(-332.29, 8.19, 131.98), Vector(-324.96, 8.15, 132.14), Vector(-324.87, 8.81, 136.76), Vector(-332.46, 8.81, 136.85), Vector(-324.92, 8.81, 145.29), Vector(-332.64, 8.19, 149.18), Vector(-336.42, 8.06, 144), Vector(-320.86, 8.07, 143.85), Vector(-319.24, 8.21, 132.82), Vector(-320.89, 8.11, 136.9), Vector(-324.16, 8.09, 148.75), Vector(-320.04, 8.21, 149.64), Vector(-315.66, 8.21, 127.95), Vector(-308.83, 8.21, 118.06), Vector(-315.85, 8.21, 117.66), Vector(-321.81, 9.81, 110.86), Vector(-304.15, 8.17, 122.83), Vector(-303.72, 10.46, 130.92), Vector(-305.35, 10.65, 146.37), Vector(-309.39, 8.29, 151.88), Vector(-313.37, 8.29, 155.06), Vector(-299.15, 10.65, 144.43), Vector(-299.67, 10.46, 136.49), Vector(-306.4, 10.57, 136.49), Vector(-290.84, 11.84, 142.74), Vector(-285.04, 12.04, 130.61), Vector(-290.73, 11.84, 138.15), Vector(-278.35, 9.34, 125.66), Vector(-278, 9.34, 130.13), Vector(-293.64, 10.07, 126.31), Vector(-293.87, 9.34, 117.28), Vector(-300.12, 8.29, 117.42), Vector(-272.84, 9.11, 133.05), Vector(-276.5, 9.13, 139.57), Vector(-271.86, 9.15, 144.41), Vector(-265.87, 9.06, 138.82), Vector(-261.51, 9.36, 145.84), Vector(-249.63, 10.35, 156.89), Vector(-250.77, 10.35, 171.11), Vector(-257.1, 9.36, 170.49), Vector(-256.05, 9.36, 156.15), Vector(-251.24, 10.35, 179.99), Vector(-266.74, 9.36, 169.52), Vector(-270.52, 11.07, 175.31), Vector(-276.13, 12.07, 169.18), Vector(-290.13, 11.94, 173.67), Vector(-294.41, 12.04, 161.69), Vector(-284.97, 12.07, 166.01), Vector(-296.81, 12.05, 169.39), Vector(-298.6, 12.05, 165.04), Vector(-305.65, 12.07, 165.18), Vector(-305.63, 12.07, 174.14), Vector(-305.85, 11.07, 180.17), Vector(-328.21, 8.07, 180.81), Vector(-338.97, 11.07, 180.47), Vector(-317.87, 11.07, 180.27), Vector(-317.78, 12.07, 173.12), Vector(-317.91, 12.07, 166.49), Vector(-288.44, 12.03, 155.36), Vector(-269.37, 9.16, 158.88), Vector(-282.57, 11.82, 153.44), Vector(-418.49, 11.11, 164.96), Vector(-436.1, 11.11, 166.49), Vector(-405.59, 10.07, 170.97), Vector(-342.5, 8.29, 154.66), Vector(-328.51, 8.2, 153.18), Vector(-343.31, 8.12, 135.39), Vector(-342.44, 8.29, 144.41), Vector(-328.56, 8.12, 128.47), Vector(-339.98, 8.21, 129.23), Vector(-336.58, 8.21, 132.35), Vector(-326.06, 9.81, 111.49), Vector(-314.63, 8.21, 134.65), Vector(-317.65, 8.12, 146.84), Vector(-313.86, 8.29, 140.94), Vector(-286.65, 11.82, 140.35), Vector(-259.94, 9.36, 149.09), Vector(-380.86, 9.06, 134.35), Vector(-351.06, 10.46, 140.64), Vector(-343.63, 8.29, 140.29), Vector(-307.07, 10.65, 140.74), Vector(-324.9, 14.07, 179.73), Vector(-332.9, 14.07, 179.56)];
}

rule: "【Map】Busan (neighbors)"
if (CurrentMap() == Map.Busan)
{
    pfLoadedMap_neighbors = [[[130, []], [131, []]], [[2, []], [131, []]], [[1, []], [130, []]], [[4, []], [130, []]], [[131, []], [3, []]], [[6, []], [11, []]], [[130, []], [5, []], [7, []]], [[6, []], [132, []]], [[132, []]], [[132, []], [10, []], [50, []], [12, []]], [[9, []], [11, []], [48, []], [50, []]], [[10, []], [132, []], [5, []]], [[50, []], [9, []], [13, []]], [[12, []], [14, []]], [[13, []], [15, []]], [[14, []], [18, []]], [[18, []], [19, []], [52, []], [20, []]], [[19, []], [18, []]], [[15, []], [16, []], [17, []]], [[16, []], [17, []], [20, []]], [[21, []], [16, []], [19, []]], [[23, []], [20, []], [30, []]], [[30, []], [123, []]], [[24, []], [21, []], [123, []]], [[28, []], [23, []], [25, []]], [[24, []], [31, []], [26, []]], [[25, []], [27, []], [126, []]], [[26, []], [29, []]], [[29, []], [24, []]], [[134, []], [28, []], [27, []]], [[21, []], [22, []]], [[25, []], [32, []], [34, []], [150, []], [151, []]], [[31, []], [33, []], [151, []], [150, []]], [[34, []], [32, []]], [[31, []], [33, []], [150, []], [151, []]], [[74, []], [133, []], [75, []], [136, []], [66, []]], [[37, []], [133, []], [147, []]], [[39, []], [40, []], [41, []], [36, []]], [[39, []], [59, []], [147, []]], [[41, []], [37, []], [40, []], [38, []], [59, []]], [[53, []], [41, []], [37, []], [39, []]], [[40, []], [42, []], [39, []], [37, []]], [[43, []], [53, []], [41, []]], [[44, []], [42, []]], [[45, []], [54, []], [43, []], [146, []]], [[49, []], [44, []], [146, []]], [[47, []], [146, []]], [[49, []], [46, []]], [[10, []], [49, []], [50, []]], [[48, []], [47, []], [45, []]], [[51, []], [9, []], [10, []], [48, []], [12, []]], [[53, []], [50, []], [52, []]], [[16, []], [51, []], [53, []]], [[42, []], [51, []], [52, []], [40, []]], [[44, []], [57, []], [55, []]], [[56, []], [54, []]], [[57, []], [55, []], [58, []]], [[54, []], [56, []]], [[60, []], [56, []], [61, []]], [[39, []], [38, []], [60, []]], [[59, []], [58, []]], [[58, []], [62, []]], [[61, []], [63, []], [138, []]], [[62, []], [64, []]], [[63, []], [65, []], [140, []]], [[64, []], [137, []], [140, []]], [[68, []], [75, []], [35, []], [135, []], [136, []], [138, []], [148, []]], [[75, []], [68, []], [72, []], [74, []], [73, []]], [[72, []], [66, []], [67, []], [75, []], [138, []], [139, []]], [[72, []], [71, []], [138, []], [139, []], [137, []]], [[77, []], [71, []], [72, []], [137, []], [81, []]], [[73, []], [78, []], [70, []], [72, []], [69, []]], [[69, []], [68, []], [75, []], [67, []], [71, []], [70, []]], [[79, []], [67, []], [76, []], [71, []]], [[67, []], [35, []], [133, []], [134, []]], [[66, []], [67, []], [72, []], [68, []], [35, []]], [[80, []], [73, []], [78, []], [143, []], [142, []]], [[78, []], [70, []], [81, []], [141, []], [143, []]], [[71, []], [76, []], [77, []], [143, []], [141, []]], [[134, []], [73, []], [80, []]], [[79, []], [76, []], [142, []], [81, []], [89, []]], [[70, []], [137, []], [83, []], [77, []], [141, []], [80, []]], [[85, []], [83, []], [100, []]], [[84, []], [81, []], [82, []]], [[140, []], [83, []]], [[86, []], [82, []]], [[92, []], [91, []], [85, []]], [[88, []], [90, []], [92, []], [149, []]], [[89, []], [87, []]], [[80, []], [134, []], [88, []]], [[87, []], [91, []], [93, []], [95, []]], [[90, []], [92, []], [86, []], [95, []], [93, []]], [[91, []], [87, []], [86, []], [149, []]], [[95, []], [90, []], [91, []], [144, []], [129, []], [127, []]], [[97, []], [95, []], [144, []]], [[94, []], [93, []], [90, []], [91, []], [144, []]], [[98, []], [99, []], [97, []], [101, []]], [[96, []], [94, []], [101, []]], [[99, []], [96, []]], [[100, []], [98, []], [96, []]], [[82, []], [99, []]], [[104, []], [102, []], [97, []], [96, []]], [[101, []], [103, []]], [[102, []], [105, []]], [[105, []], [101, []]], [[145, []], [104, []], [103, []]], [[107, []], [109, []]], [[108, []], [110, []], [106, []]], [[111, []], [107, []], [109, []], [128, []]], [[106, []], [108, []], [128, []], [145, []], [111, []]], [[107, []]], [[128, []], [112, []], [108, []], [145, []], [109, []]], [[111, []], [113, []]], [[112, []], [116, []]], [[117, []], [116, []]], [[116, []], [118, []], [127, []]], [[114, []], [115, []], [113, []]], [[118, []], [114, []]], [[117, []], [115, []], [119, []]], [[120, []], [126, []], [118, []]], [[121, []], [119, []]], [[124, []], [120, []]], [[123, []], [124, []]], [[22, []], [23, []], [122, []], [151, [2]]], [[122, []], [125, []], [121, []], [150, [2]]], [[126, []], [124, []]], [[26, []], [125, []], [119, []]], [[115, []], [129, []], [93, []]], [[129, []], [111, []], [108, []], [109, []], [145, []]], [[93, []], [144, []], [127, []], [128, []]], [[2, []], [0, []], [3, []], [6, []]], [[0, []], [1, []], [4, []]], [[7, []], [8, []], [9, []], [11, []]], [[35, []], [36, []], [74, []], [134, []]], [[74, []], [133, []], [29, []], [79, []], [89, []]], [[136, []], [66, []], [138, []], [148, []]], [[35, []], [135, []], [66, []], [148, []]], [[138, []], [69, []], [70, []], [81, []], [65, []]], [[62, []], [69, []], [68, []], [135, []], [66, []], [137, []]], [[68, []], [69, []]], [[84, []], [65, []], [64, []]], [[81, []], [143, []], [78, []], [77, []]], [[143, []], [80, []], [76, []]], [[141, []], [142, []], [76, []], [78, []], [77, []], [149, []]], [[94, []], [95, []], [93, []], [129, []]], [[109, []], [105, []], [128, []], [111, []]], [[45, []], [46, []], [44, []]], [[36, []], [38, []], [148, [1]]], [[135, []], [136, []], [66, []], [147, []]], [[143, [1]], [92, []], [87, []]], [[31, []], [32, []], [34, []], [124, [1]]], [[31, []], [32, []], [34, []], [123, [1]]]];
}

rule: "【Map】Samoa (nodes)"
if (CurrentMap() == Map.Samoa)
{
    pfLoadedMap_nodes = [Vector(315.78, 18.43, -203.21), Vector(323.76, 14.62, -217.1), Vector(324.58, 14.63, -224.63), Vector(328.9, 14.6, -225.58), Vector(329.96, 14.63, -221.44), Vector(333.21, 18.35, -233.01), Vector(338.28, 21.93, -241.64), Vector(316.27, 14.59, -222.12), Vector(313.62, 12.27, -225.93), Vector(311.52, 12.26, -222.32), Vector(297.44, 12.11, -229.21), Vector(287.59, 12.11, -226.45), Vector(288.96, 12.11, -221.36), Vector(300.98, 12.23, -223.38), Vector(291.42, 14, -208.01), Vector(279.63, 13, -214.8), Vector(269.83, 13, -220.44), Vector(282.93, 12.07, -225.28), Vector(273.8, 8.99, -230.05), Vector(267.63, 9.07, -232.23), Vector(262.38, 9.09, -223.18), Vector(234.19, 9, -219.8), Vector(234.22, 9, -228.6), Vector(224.15, 9, -220.6), Vector(222.91, 9, -223.69), Vector(244.11, 9, -223.99), Vector(243.92, 10, -216.76), Vector(233.8, 13, -216.06), Vector(234.07, 15, -222.65), Vector(233.99, 14.99, -234.35), Vector(224.09, 10, -216.15), Vector(239.37, 8.51, -236.58), Vector(255.01, 8, -236.07), Vector(254.72, 9.03, -223.79), Vector(256.73, 8, -232.61), Vector(256.18, 8, -240.55), Vector(249.84, 7, -237.57), Vector(251.17, 7, -242.12), Vector(266.1, 8.1, -246.46), Vector(272.5, 8.1, -246.61), Vector(280.62, 9, -244.32), Vector(277.58, 8.91, -231.21), Vector(284.76, 9.27, -248.36), Vector(284.21, 9, -236.8), Vector(278.98, 9, -236.84), Vector(285.34, 9, -242.15), Vector(295.77, 10.11, -247.87), Vector(302.63, 12.08, -234.12), Vector(300.69, 11.42, -240.76), Vector(305.56, 11.34, -241.33), Vector(312.17, 12.23, -235.12), Vector(311.78, 12.3, -240.53), Vector(308.95, 11.24, -243.26), Vector(292.35, 12.29, -238.53), Vector(301.9, 12.11, -231.21), Vector(281.23, 10, -259.25), Vector(286.23, 9.18, -251.74), Vector(287.72, 6.11, -267.69), Vector(273.28, 6.11, -268.07), Vector(269.85, 8.1, -260.7), Vector(270.03, 6.09, -271.42), Vector(265.54, 5.2, -275.88), Vector(259.59, 5.2, -278.91), Vector(243.86, 8, -283.13), Vector(240.95, 8, -286.05), Vector(234.01, 8, -293.05), Vector(226.53, 8, -285.91), Vector(227.13, 8, -281.05), Vector(240.85, 8, -280.84), Vector(239.47, 9.98, -272.01), Vector(247.36, 9.98, -266.68), Vector(253.79, 9.98, -271.45), Vector(258.55, 9.98, -265.84), Vector(258.65, 9.98, -275.21), Vector(270.23, 10.48, -268.15), Vector(265.04, 9.98, -268.42), Vector(265.11, 8.1, -258.65), Vector(258.99, 8.1, -248.99), Vector(252.61, 6.1, -258.07), Vector(248.44, 6.25, -267.4), Vector(244.79, 5.2, -272.2), Vector(250.52, 5.2, -281.04), Vector(280.4, 10, -267.25), Vector(249.03, 6.31, -255.84), Vector(255.04, 6.81, -250.1), Vector(243.41, 6.12, -255.81), Vector(234.31, 6.12, -246.42), Vector(234.13, 6.12, -265.61), Vector(223.8, 6.12, -256.03), Vector(219.35, 6.25, -267.06), Vector(216.61, 6.21, -259.32), Vector(216.49, 6.1, -253.01), Vector(217.25, 6.27, -247.41), Vector(216.03, 7, -241.7), Vector(217.06, 7, -237.04), Vector(209.49, 8, -240.1), Vector(210.72, 8, -234.34), Vector(213.12, 9.02, -224.15), Vector(202.63, 8.1, -248.21), Vector(199.96, 8.96, -237.3), Vector(199.78, 8.1, -244.07), Vector(194.06, 8.32, -246.08), Vector(203.01, 8.1, -258.65), Vector(197.71, 8.1, -260.8), Vector(197.54, 6.1, -268.76), Vector(202.86, 9.98, -268.69), Vector(210.05, 9.98, -266.32), Vector(214.84, 9.98, -271.93), Vector(209.58, 9.98, -275.09), Vector(221.28, 9.98, -266.7), Vector(228.28, 9.98, -272.13), Vector(240.36, 6.12, -266.2), Vector(228.35, 6.25, -266.83), Vector(223.23, 5.2, -271.98), Vector(216.42, 5.2, -281.04), Vector(224.9, 8, -283.12), Vector(205.65, 5.2, -277.93), Vector(181.18, 6.1, -268.36), Vector(181.27, 9.09, -256.39), Vector(186.66, 9.23, -256.36), Vector(177.4, 9.1, -251.51), Vector(187.72, 10, -267.76), Vector(183.27, 9.25, -250.43), Vector(184.47, 9, -244.67), Vector(183.19, 9, -240.03), Vector(188.05, 9, -244.1), Vector(189.38, 9, -236.62), Vector(202.95, 9.11, -228.77), Vector(201.4, 9.07, -233.23), Vector(190.71, 8.94, -230.88), Vector(206.67, 9.09, -222.92), Vector(187.88, 13, -215.44), Vector(198.7, 13, -220.45), Vector(176.73, 14, -208.13), Vector(170.94, 12.24, -217.54), Vector(153.2, 13.93, -222.78), Vector(159.92, 12.23, -223.35), Vector(157.19, 12.23, -227.85), Vector(156.21, 12.23, -239.51), Vector(160.88, 11.35, -246.05), Vector(165.74, 12.1, -233.23), Vector(161.43, 11.98, -234.53), Vector(162.68, 11.33, -241.36), Vector(166.9, 11.44, -240.71), Vector(175.96, 12.29, -239), Vector(169.01, 12.11, -223.86), Vector(178.48, 12.11, -221.17), Vector(180.68, 12.11, -225.9), Vector(169.98, 12.11, -228.82), Vector(307.87, 18.62, -206.5), Vector(302.83, 17.11, -207.24), Vector(234.01, 8.51, -235.03), Vector(246.5, 7, -243.63), Vector(228.13, 8.51, -236.49), Vector(173.85, 6.3, -265.07), Vector(294.32, 6.31, -265.32), Vector(338.33, 18.35, -235.26), Vector(338.43, 18.35, -241.84), Vector(332.32, 18.35, -238.39), Vector(306.97, 12.12, -234.51), Vector(295.87, 12.24, -216.2), Vector(283.91, 12.11, -222.22), Vector(288.04, 9.09, -256.39), Vector(263.33, 9.98, -269.51), Vector(234.21, 8.06, -281.1), Vector(205.03, 9.98, -269.59), Vector(268.17, 8.1, -244.08), Vector(244.16, 9, -220.49), Vector(184.51, 12.12, -221.47), Vector(267.43, 13, -221.66), Vector(296.12, 12.02, -238.5), Vector(242.72, 9.98, -269.72), Vector(247, 7, -234.48), Vector(220.86, 7, -234.45), Vector(225.36, 9.98, -269.78), Vector(229.45, 6.12, -263.98), Vector(238.71, 6.12, -264.05), Vector(218.85, 6.31, -256.24), Vector(238.85, 6.12, -247.62), Vector(242.04, 6.12, -251.03), Vector(229.11, 6.12, -246.65), Vector(225.33, 6.12, -250.48), Vector(242.7, 6.12, -261.4), Vector(225.68, 6.12, -261.76), Vector(234.33, 6.6, -242.78)];
}

rule: "【Map】Samoa (neighbors)"
if (CurrentMap() == Map.Samoa)
{
    pfLoadedMap_neighbors = [[[1, []], [149, []]], [[4, []], [2, []], [0, []], [7, []]], [[1, []], [3, []]], [[5, []], [4, []], [2, []]], [[3, []], [1, []]], [[6, []], [158, []], [156, []], [3, []]], [[5, []]], [[1, []], [9, []], [8, []]], [[9, []], [7, []], [50, []], [159, []], [13, []], [54, []], [10, []], [49, []], [47, []]], [[7, []], [8, []], [13, []], [54, []], [10, []], [159, []], [50, []]], [[54, []], [11, []], [13, []], [9, []], [8, []]], [[10, []], [53, []], [12, []], [17, []]], [[13, []], [160, []], [11, []], [17, []], [161, []]], [[10, []], [9, []], [54, []], [159, []], [8, []], [12, []], [160, []]], [[160, []], [15, []], [150, []]], [[14, []], [16, []], [161, []]], [[15, []], [169, []]], [[11, []], [12, []], [161, []], [41, []], [18, []]], [[41, []], [17, []], [19, []]], [[39, []], [38, []], [18, []], [41, []], [20, []]], [[19, []], [33, []], [169, [2]]], [[23, []], [24, []], [25, []], [167, []]], [[25, []], [24, []], [151, []]], [[21, []], [30, []], [24, []]], [[21, []], [22, []], [23, []], [97, []]], [[21, []], [22, []], [33, []], [167, []]], [[167, []], [27, []]], [[26, []], [30, []], [28, []]], [[27, []], [29, []]], [[28, []], [184, [1]]], [[27, []], [23, []]], [[151, []], [152, []], [172, []]], [], [[20, []], [25, []], [172, [1]]], [], [], [[172, []]], [], [[76, []], [77, []], [19, []], [166, []]], [[59, []], [40, []], [19, []], [166, []]], [[42, []], [44, []], [39, []]], [[17, []], [18, []], [44, []], [19, []]], [[45, []], [40, []], [56, []]], [[44, []], [45, []]], [[41, []], [43, []], [40, []]], [[43, []], [42, []]], [[49, []], [56, []], [162, []], [48, []]], [[48, []], [50, []], [54, []], [53, []], [8, []]], [[49, []], [47, []], [46, []], [170, []]], [[52, []], [48, []], [50, []], [46, []], [159, []], [8, []]], [[8, []], [51, []], [47, []], [49, []], [9, []]], [[50, []], [52, []]], [[51, []], [49, []]], [[47, []], [54, []], [11, []], [170, []]], [[159, []], [47, []], [53, []], [10, []], [9, []], [13, []], [8, []]], [[56, []], [82, []]], [[42, []], [46, []], [162, []], [55, []]], [[162, []], [155, []], [58, []]], [[59, []], [60, []], [57, []]], [[76, []], [58, []], [60, []], [39, []]], [[58, []], [59, []], [61, []]], [[60, []], [62, []]], [[61, []], [81, []]], [[81, []], [68, []], [64, []]], [[63, []], [68, []], [65, []]], [[66, []], [64, []]], [[115, []], [65, []]], [[115, []], [164, []], [110, []]], [[63, []], [69, []], [64, []], [164, []]], [[68, []], [171, []]], [[71, []], [171, []]], [[70, []], [72, []], [73, []]], [[71, []], [163, []]], [[71, []], [163, []], [81, [1]]], [[82, []], [75, []]], [[74, []], [76, []], [163, []]], [[75, []], [38, []], [77, []], [59, []], [78, []]], [[38, []], [76, []], [84, []]], [[79, []], [83, []], [76, []]], [[80, []], [78, []]], [[81, []], [111, []], [79, []]], [[62, []], [80, []], [63, []], [73, [2]]], [[55, []], [74, []]], [[85, []], [84, []], [78, []], [87, []], [86, []], [176, []], [111, []], [182, []]], [[152, []], [83, []], [77, []]], [[83, []], [111, []], [86, []], [87, []], [176, []], [179, []], [182, []]], [[85, []], [87, []], [88, []], [83, []], [180, []], [178, []], [184, []]], [[112, []], [111, []], [86, []], [88, []], [85, []], [83, []], [175, []], [176, []]], [[87, []], [112, []], [86, []], [90, []], [91, []], [175, []], [177, []], [181, []], [183, []]], [[113, []], [90, []]], [[89, []], [91, []], [102, []], [88, []], [177, []]], [[98, []], [92, []], [90, []], [88, []], [177, []]], [[91, []], [98, []], [153, []]], [[95, []], [94, []]], [[96, []], [153, []], [93, []], [173, []]], [[93, []], [96, []]], [[95, []], [97, []], [94, []]], [[24, []], [130, []], [96, []], [173, [1]]], [[100, []], [91, []], [92, []], [102, []]], [[128, []], [100, []], [101, []], [129, []]], [[99, []], [98, []], [101, []]], [[102, []], [103, []], [100, []], [99, []], [125, []]], [[90, []], [103, []], [105, []], [98, []], [101, []]], [[102, []], [104, []], [101, []]], [[117, []], [116, []], [103, []]], [[165, []], [121, []], [102, []]], [[107, []], [165, []]], [[109, []], [106, []], [108, []]], [[165, []], [107, []], [114, [1]]], [[107, []], [174, []]], [[67, []], [174, []]], [[87, []], [80, []], [85, []], [176, []], [83, []], [182, []]], [[113, []], [87, []], [88, []], [175, []]], [[114, []], [112, []], [89, []]], [[116, []], [115, []], [113, []], [108, [2]]], [[67, []], [66, []], [114, []]], [[104, []], [114, []]], [[118, []], [104, []], [154, []]], [[119, []], [117, []], [122, []], [120, []]], [[121, []], [118, []], [122, []]], [[122, []], [118, []], [143, []], [139, []], [142, []]], [[105, []], [119, []]], [[123, []], [118, []], [119, []], [120, []]], [[125, []], [124, []], [122, []]], [[123, []], [126, []]], [[101, []], [123, []], [126, []]], [[124, []], [125, []], [129, []]], [[130, []], [128, []], [129, []]], [[127, []], [99, []], [129, []]], [[168, []], [147, []], [126, []], [128, []], [99, []], [127, []]], [[97, []], [127, []]], [[133, []], [132, []], [168, []]], [[131, []]], [[134, []], [131, []]], [[145, []], [133, []], [146, []], [136, []]], [[137, []], [136, []]], [[135, []], [140, []], [148, []], [145, []], [134, []], [137, []]], [[138, []], [135, []], [141, []], [140, []], [136, []]], [[139, []], [141, []], [137, []]], [[142, []], [138, []], [120, []]], [[137, []], [136, []], [143, []], [144, []], [148, []]], [[142, []], [138, []], [137, []]], [[143, []], [139, []], [120, []], [141, []]], [[120, []], [142, []], [140, []], [144, []]], [[143, []], [140, []], [147, []]], [[146, []], [148, []], [136, []], [134, []]], [[147, []], [145, []], [168, []], [134, []]], [[148, []], [146, []], [129, []], [168, []], [144, []]], [[136, []], [147, []], [145, []], [140, []]], [[150, []], [0, []]], [[149, []], [160, [1]], [14, [1]]], [[31, []], [22, []], [184, []]], [[31, []], [84, []]], [[94, []], [92, []], [173, []]], [[117, []]], [[57, []]], [[157, []], [5, []]], [[158, []], [156, []]], [[157, []], [5, []]], [[49, []], [8, []], [54, []], [13, []], [9, []]], [[14, []], [12, []], [13, []], [150, []]], [[15, []], [12, []], [17, []]], [[46, []], [56, []], [57, []]], [[72, []], [75, []], [73, []]], [[67, []], [68, []]], [[106, []], [105, []], [108, []]], [[38, []], [39, []]], [[25, []], [26, []], [21, []]], [[131, []], [129, []], [147, []], [146, []]], [[16, []], [20, [1]]], [[53, []], [48, []]], [[70, []], [69, []], [176, [1]]], [[33, []], [36, []], [31, []]], [[97, []], [153, []], [94, []]], [[110, []], [109, []], [175, [1]]], [[174, [2]], [88, []], [87, []], [112, []], [177, []], [183, []]], [[171, [2]], [111, []], [85, []], [87, []], [83, []], [182, []]], [[175, []], [88, []], [91, []], [90, []], [183, []]], [[86, []], [179, []], [184, []]], [[178, []], [85, []]], [[181, []], [86, []], [184, []]], [[88, []], [180, []]], [[83, []], [85, []], [176, []], [111, []]], [[175, []], [88, []], [177, []]], [[86, []], [180, []], [178, []], [151, []], [29, []]]];
}

//Original code begins here

rule: "Set destination [debug]"
Event.OngoingPlayer
if (IsDummyBot(EventPlayer()) == true)
{
    pfDestination = PositionOf(PlayersInSlot(0, Team.Team1));
    Wait(0.25, WaitBehavior.IgnoreCondition);
    Loop();
}

rule: "Spawn dummy for testing [debug]"
{
    Wait(10, WaitBehavior.IgnoreCondition);
    CreateDummyBot(Hero.Soldier76, Team.Team1, -1, PositionOf(PlayersInSlot(0, Team.All)), Vector(0, 0, 0));
    LogToInspector('decompiled version :D');
}

rule: 'Jump on attribute 2'
Event.OngoingPlayer
if (ArrayContains(pfAttributes, 2))
{
    PressButton(EventPlayer(), Button.Jump);
}


rule: 'attributes init'
Event.OngoingPlayer
if (IsDummyBot(EventPlayer()))
{
    pfPlayerAttributes = Append(pfPlayerAttributes, 2);
}